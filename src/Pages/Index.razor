@page "/"
@using SMCAxisController.Hardware
@using SMCAxisController.DataModel
@using SMCAxisController.StateMachine
@inject ISnackbar Snackbar
@inject IIndexVm Vm
@inject IStateMachine StateMachine
@inject IJSRuntime JS

<PageTitle>SMC Connector</PageTitle>
<MudPaper Class="pa-16 ma-2" Elevation="3">
    <MudStack Row="true" Spacing="10">
        <MudSelect T="string" Label="Controller Name:" ValueChanged="@OnSelectedControllerChanged" Style="width: 200px;">
            @foreach (var controllerName in Vm.GetAllControllerNames())
            {
                <MudSelectItem Value="controllerName">@controllerName</MudSelectItem>
            }
        </MudSelect>
        <MudText Typo="Typo.h5"> IP: @(Vm.CurrentSmcEthernetIpConnector != null ? Vm.CurrentSmcEthernetIpConnector.ControllerProperties.Ip : "not availabe") </MudText>
        <MudText Typo="Typo.h5"> Status: @(Vm.CurrentSmcEthernetIpConnector != null ? Vm.CurrentSmcEthernetIpConnector.Status.ToString() : "not availabe") </MudText>
    </MudStack>    
</MudPaper>
@if (Vm.CurrentSmcEthernetIpConnector != null && Vm.CurrentSmcEthernetIpConnector.Status == ControllerStatus.Connected)
{
    <MudPaper Class="pa-16 ma-2" Elevation="3">
        <MudStack Row="true">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@Vm.CurrentSmcEthernetIpConnector.PowerOn">
                PowerOn
            </MudButton>

            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="(()=> InvokeReturnToOriginAsync())">
                Origin
            </MudButton>

            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="(()=> InvokeGoToPositionNumericalAsync())">
                GoToPosition
            </MudButton>

            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@Vm.CurrentSmcEthernetIpConnector.PowerOff">
                PowerOff
            </MudButton>

            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@Vm.CurrentSmcEthernetIpConnector.HoldOn">
                Hold On
            </MudButton>

            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@Vm.CurrentSmcEthernetIpConnector.HoldOff">
                HoldOff
            </MudButton>

            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@Vm.CurrentSmcEthernetIpConnector.Reset">
                Reset
            </MudButton>

            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@Vm.CurrentSmcEthernetIpConnector.AlarmReset">
                Alarm Reset
            </MudButton>
        </MudStack>
    </MudPaper>

    <MudPaper Class="pa-16 ma-2" Elevation="3">
        <MudStack>
            <MudSelect @bind-Value="@Vm.CurrentSmcEthernetIpConnector.MovementParameters.MovementMode" Label="Movement Mode">
                @foreach (var mode in Enum.GetValues(typeof(MovementMode)).Cast<MovementMode>())
                {
                    <MudSelectItem Value="mode">@mode</MudSelectItem>
                }
            </MudSelect>
            <MudNumericField @bind-Value="@Vm.CurrentSmcEthernetIpConnector.MovementParameters.Speed" Label="W3Speed [mm/s]" Variant="Variant.Filled" Min="0"/>
            <MudNumericField @bind-Value="@Vm.CurrentSmcEthernetIpConnector.MovementParameters.TargetPosition" Label="Target Position [0.01mm]" Variant="Variant.Filled" Min="0"/>
            <MudNumericField @bind-Value="@Vm.CurrentSmcEthernetIpConnector.MovementParameters.Acceleration" Label="W6Acceleration [mm/s^2]" Variant="Variant.Filled" Min="0"/>
            <MudNumericField @bind-Value="@Vm.CurrentSmcEthernetIpConnector.MovementParameters.Deceleration" Label="W7Deceleration [mm/s^2]" Variant="Variant.Filled" Min="0"/>
            <MudNumericField @bind-Value="@Vm.CurrentSmcEthernetIpConnector.MovementParameters.PushingForce" Label="Pushing Force [%]" Variant="Variant.Filled" Min="0"/>
            <MudNumericField @bind-Value="@Vm.CurrentSmcEthernetIpConnector.MovementParameters.TriggerLv" Label="TThreshold Force Value [%]" Variant="Variant.Filled" Min="0"/>
            <MudNumericField @bind-Value="@Vm.CurrentSmcEthernetIpConnector.MovementParameters.PushingSpeed" Label="Pushing W3Speed [mm/s]" Variant="Variant.Filled" Min="0"/>
            <MudNumericField @bind-Value="@Vm.CurrentSmcEthernetIpConnector.MovementParameters.PushingForceForPositioning" Label="Moving Force [%]" Variant="Variant.Filled" Min="0"/>
            <MudNumericField @bind-Value="@Vm.CurrentSmcEthernetIpConnector.MovementParameters.Area1" Label="Area 1 [0.01mm]" Variant="Variant.Filled" Min="0"/>
            <MudNumericField @bind-Value="@Vm.CurrentSmcEthernetIpConnector.MovementParameters.Area2" Label="Area 2 [0.01mm]" Variant="Variant.Filled" Min="0"/>
            <MudNumericField @bind-Value="@Vm.CurrentSmcEthernetIpConnector.MovementParameters.PositioningWidth" Label="In Position [0.01mm]" Variant="Variant.Filled" Min="0"/>
        </MudStack>
    </MudPaper>
    
    <MudPaper Class="pa-16 ma-2" Elevation="3">
        InputPort:
        <br/>
        <MudChip T="string" Color="Color.Error" Disabled="!Vm.CurrentSmcEthernetIpConnector.ControllerInputData.IsAlarm()">ALARM</MudChip>
        <MudChip T="string" Color="Color.Error" Disabled="!Vm.CurrentSmcEthernetIpConnector.ControllerInputData.IsEstop()">ESTOP</MudChip>
        <MudChip T="string" Disabled="!Vm.CurrentSmcEthernetIpConnector.ControllerInputData.IsWarea()">WAREA</MudChip>
        <MudChip T="string" Disabled="!Vm.CurrentSmcEthernetIpConnector.ControllerInputData.IsArea()">AREA</MudChip>
        <MudChip T="string" Disabled="!Vm.CurrentSmcEthernetIpConnector.ControllerInputData.IsInp()">INP</MudChip>
        <MudChip T="string" Disabled="!Vm.CurrentSmcEthernetIpConnector.ControllerInputData.IsSeton()">SETON</MudChip>
        <MudChip T="string" Disabled="!Vm.CurrentSmcEthernetIpConnector.ControllerInputData.IsSvre()">SVRE</MudChip>
        <MudChip T="string" Disabled="!Vm.CurrentSmcEthernetIpConnector.ControllerInputData.IsBusy()">BUSY</MudChip>
        <MudChip T="string" Disabled="true"></MudChip>
        <MudChip T="string" Disabled="true"></MudChip>
        <MudChip T="string" Disabled="!Vm.CurrentSmcEthernetIpConnector.ControllerInputData.IsOut5()">OUT5</MudChip>
        <MudChip T="string" Disabled="!Vm.CurrentSmcEthernetIpConnector.ControllerInputData.IsOut4()">OUT4</MudChip>
        <MudChip T="string" Disabled="!Vm.CurrentSmcEthernetIpConnector.ControllerInputData.IsOut3()">OUT3</MudChip>
        <MudChip T="string" Disabled="!Vm.CurrentSmcEthernetIpConnector.ControllerInputData.IsOut2()">OUT2</MudChip>
        <MudChip T="string" Disabled="!Vm.CurrentSmcEthernetIpConnector.ControllerInputData.IsOut1()">OUT1</MudChip>
        <MudChip T="string" Disabled="!Vm.CurrentSmcEthernetIpConnector.ControllerInputData.IsOut0()">OUT0</MudChip>
        
        <MudDivider/>
        ControllerInformationFlag:
        <br/>
        <MudChip T="string" Disabled="!Vm.CurrentSmcEthernetIpConnector.ControllerInputData.IsReady()">READY</MudChip>
        <MudDivider/>
        <MudStack>
            <MudNumericField HideSpinButtons="true" ReadOnly="true" @bind-Value="@Vm.CurrentSmcEthernetIpConnector.ControllerInputData.InputPort" Label="InputPort" Variant="Variant.Filled" Min="0"/>
            @* Convert.ToString(Vm.CurrentSmcEthernetIpConnector.ControllerInputData.InputPort, 2).PadLeft(16, '0')} *@
            <MudText Typo="Typo.body1" Label="InputPort">
                @Convert.ToString(Vm.CurrentSmcEthernetIpConnector.ControllerInputData.InputPort & 0xFFFF, 2).PadLeft(16, '0')
            </MudText>
            
            <MudNumericField HideSpinButtons="true" ReadOnly="true" @bind-Value="@Vm.CurrentSmcEthernetIpConnector.ControllerInputData.ControllerInformationFlag" Label="ControllerInformationFlag" Variant="Variant.Filled" Min="0"/>
            <MudText Typo="Typo.body1" Label="InputPort">
                @Convert.ToString(Vm.CurrentSmcEthernetIpConnector.ControllerInputData.ControllerInformationFlag & 0xFFFF, 2).PadLeft(16, '0')
            </MudText>
            <MudNumericField HideSpinButtons="true" ReadOnly="true" @bind-Value="@Vm.CurrentSmcEthernetIpConnector.ControllerInputData.CurrentPosition" Label="CurrentPosition" Variant="Variant.Filled" Min="0"/>
            <MudNumericField HideSpinButtons="true" ReadOnly="true" @bind-Value="@Vm.CurrentSmcEthernetIpConnector.ControllerInputData.CurrentSpeed" Label="CurrentSpeed [mm/s]" Variant="Variant.Filled" Min="0"/>
            <MudNumericField HideSpinButtons="true" ReadOnly="true" @bind-Value="@Vm.CurrentSmcEthernetIpConnector.ControllerInputData.CurrentPushingForce" Label="CurrentPushingForce [%]" Variant="Variant.Filled" Min="0"/>
            <MudNumericField HideSpinButtons="true" ReadOnly="true" @bind-Value="@Vm.CurrentSmcEthernetIpConnector.ControllerInputData.TargetPosition" Label="TargetPosition [0.01mm]" Variant="Variant.Filled" Min="0"/>
            <MudNumericField HideSpinButtons="true" ReadOnly="true" @bind-Value="@Vm.CurrentSmcEthernetIpConnector.ControllerInputData.Alarm1And2" Label="Alarm1And2" Variant="Variant.Filled" Min="0"/>
            <MudNumericField HideSpinButtons="true" ReadOnly="true" @bind-Value="@Vm.CurrentSmcEthernetIpConnector.ControllerInputData.Alarm3And4" Label="Alarm3And4" Variant="Variant.Filled" Min="0"/>
        </MudStack>
    </MudPaper>
    
    @* <MudButton @ref="jogPlusButtonRef" Class="mud-button mud-button-filled" Color="Color.Primary"> *@
    @*     Jog+ *@
    @* </MudButton> *@
}
else if(Vm.CurrentSmcEthernetIpConnector != null)
{
    <MudPaper Class="pa-16 ma-2" Elevation="3">
        <MudText Typo="Typo.h5"> Please wait for the controller to connect... </MudText>
    </MudPaper>
}
else
{
    <MudPaper Class="pa-16 ma-2" Elevation="3">
        <MudText Typo="Typo.h5"> Please select controller </MudText>
    </MudPaper>
}

@code {
    private MudButton  jogPlusButtonRef;
    string _selectedControllerName;
    private bool _jsInitialized = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_jsInitialized)
        {
            // Wait until MudButton is fully initialized
            await Task.Delay(100); // Small delay to ensure element exists
            if (jogPlusButtonRef != null)
            {
                await JS.InvokeVoidAsync("registerPressEvents", jogPlusButtonRef, 
                    DotNetObjectReference.Create(this));
                _jsInitialized = true;
            }
        }
    }

    [JSInvokable]
    public async Task OnJogPlusPressStart()
    {
        Console.WriteLine("Button Pressed and Held");
    }

    [JSInvokable]
    public async Task OnJogPlusPressEnd()
    {
        Console.WriteLine("Button Released");
    }
    
    private async Task InvokeGoToPositionNumericalAsync()
    {
        if (Vm.CurrentSmcEthernetIpConnector != null)
        {
            try
            {
                await Task.Run(() => Vm.CurrentSmcEthernetIpConnector.GoToPositionNumerical());
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error: {ex.Message}", Severity.Error);
            }
        }
    }
    
    private async Task InvokeReturnToOriginAsync()
    {
        if (Vm.CurrentSmcEthernetIpConnector != null)
        {
            try
            {
                await Task.Run(() => Vm.CurrentSmcEthernetIpConnector.ReturnToOrigin());
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error: {ex.Message}", Severity.Error);
            }
        }
    }
    
    
    protected override Task OnInitializedAsync()
    {
        return base.OnInitializedAsync();
    }

    void OnControllerDataUpdated()
    {
        InvokeAsync(StateHasChanged);    
    }
    
    void OnSelectedControllerChanged(string selectedControllerName)
    {
        if (Vm.CurrentSmcEthernetIpConnector != null)
            Vm.CurrentSmcEthernetIpConnector.OnNewControllerData -= OnControllerDataUpdated; 
            
        Vm.SetControllerByName(selectedControllerName);
        Vm.CurrentSmcEthernetIpConnector.OnNewControllerData += OnControllerDataUpdated; 
        InvokeAsync(StateHasChanged);
    }

}