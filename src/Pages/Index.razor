@page "/"
@using SMCAxisController.Hardware
@using SMCAxisController.DataModel
@inject ISnackbar Snackbar
@inject IIndexVm Vm;

<PageTitle>SMC Connector</PageTitle>
<MudPaper Class="pa-16 ma-2" Elevation="3">
    <MudStack Row="true" Spacing="10">
        <MudSelect T="string" Label="Controller Name:" ValueChanged="@OnSelectedControllerChanged" Style="width: 200px;">
            @foreach (var controllerName in Vm.GetAllControllerNames())
            {
                <MudSelectItem Value="controllerName">@controllerName</MudSelectItem>
            }
        </MudSelect>
        <MudText Typo="Typo.h5"> IP: @(Vm.CurrentSmcEthernetIpConnector != null ? Vm.CurrentSmcEthernetIpConnector.ControllerProperties.Ip : "not availabe") </MudText>
        <MudText Typo="Typo.h5"> Status: @(Vm.CurrentSmcEthernetIpConnector != null ? Vm.CurrentSmcEthernetIpConnector.Status.ToString() : "not availabe") </MudText>
    </MudStack>    
</MudPaper>
@if (Vm.CurrentSmcEthernetIpConnector != null && Vm.CurrentSmcEthernetIpConnector.Status == ControllerStatus.Connected)
{
    <MudPaper Class="pa-16 ma-2" Elevation="3">
        <MudStack Row="true">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@Vm.CurrentSmcEthernetIpConnector.PowerOn">
                PowerOn
            </MudButton>

            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@Vm.CurrentSmcEthernetIpConnector.ReturnToOrigin">
                Origin
            </MudButton>

            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@Vm.CurrentSmcEthernetIpConnector.GoToPositionNumerical">
                GoToPosition
            </MudButton>

            @* <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@Vm.CurrentSmcEthernetIpConnector.MyTestFunction"> *@
            @*     Test *@
            @* </MudButton> *@

            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@Vm.CurrentSmcEthernetIpConnector.PowerOff">
                PowerOff
            </MudButton>

            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@Vm.CurrentSmcEthernetIpConnector.HoldOn">
                Hold On
            </MudButton>

            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@Vm.CurrentSmcEthernetIpConnector.HoldOff">
                HoldOff
            </MudButton>

            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@Vm.CurrentSmcEthernetIpConnector.Reset">
                Reset
            </MudButton>

            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@Vm.CurrentSmcEthernetIpConnector.AlarmReset">
                Alarm Reset
            </MudButton>
        </MudStack>
    </MudPaper>

    <MudPaper Class="pa-16 ma-2" Elevation="3">
        <MudStack>
            <MudSelect @bind-Value="@Vm.CurrentSmcEthernetIpConnector.MovementParameters.MovementMode" Label="Movement Mode">
                @foreach (var mode in Enum.GetValues(typeof(MovementMode)).Cast<MovementMode>())
                {
                    <MudSelectItem Value="mode">@mode</MudSelectItem>
                }
            </MudSelect>
            <MudNumericField @bind-Value="@Vm.CurrentSmcEthernetIpConnector.MovementParameters.Speed" Label="W3Speed [mm/s]" Variant="Variant.Filled" Min="0"/>
            <MudNumericField @bind-Value="@Vm.CurrentSmcEthernetIpConnector.MovementParameters.TargetPosition" Label="Target Position [0.01mm]" Variant="Variant.Filled" Min="0"/>
            <MudNumericField @bind-Value="@Vm.CurrentSmcEthernetIpConnector.MovementParameters.Acceleration" Label="W6Acceleration [mm/s^2]" Variant="Variant.Filled" Min="0"/>
            <MudNumericField @bind-Value="@Vm.CurrentSmcEthernetIpConnector.MovementParameters.Deceleration" Label="W7Deceleration [mm/s^2]" Variant="Variant.Filled" Min="0"/>
            <MudNumericField @bind-Value="@Vm.CurrentSmcEthernetIpConnector.MovementParameters.PushingForce" Label="Pushing Force [%]" Variant="Variant.Filled" Min="0"/>
            <MudNumericField @bind-Value="@Vm.CurrentSmcEthernetIpConnector.MovementParameters.TriggerLv" Label="TThreshold Force Value [%]" Variant="Variant.Filled" Min="0"/>
            <MudNumericField @bind-Value="@Vm.CurrentSmcEthernetIpConnector.MovementParameters.PushingSpeed" Label="Pushing W3Speed [mm/s]" Variant="Variant.Filled" Min="0"/>
            <MudNumericField @bind-Value="@Vm.CurrentSmcEthernetIpConnector.MovementParameters.PushingForceForPositioning" Label="Moving Force [%]" Variant="Variant.Filled" Min="0"/>
            <MudNumericField @bind-Value="@Vm.CurrentSmcEthernetIpConnector.MovementParameters.Area1" Label="Area 1 [0.01mm]" Variant="Variant.Filled" Min="0"/>
            <MudNumericField @bind-Value="@Vm.CurrentSmcEthernetIpConnector.MovementParameters.Area2" Label="Area 2 [0.01mm]" Variant="Variant.Filled" Min="0"/>
            <MudNumericField @bind-Value="@Vm.CurrentSmcEthernetIpConnector.MovementParameters.PositioningWidth" Label="In Position [0.01mm]" Variant="Variant.Filled" Min="0"/>
        </MudStack>
    </MudPaper>
}
else if (Vm.CurrentSmcEthernetIpConnector != null)
{
    <MudPaper Class="pa-16 ma-2" Elevation="3">
        <MudText Typo="Typo.h5"> Please wait for the controller to connect... </MudText>
    </MudPaper>
}
else
{
    <MudPaper Class="pa-16 ma-2" Elevation="3">
        <MudText Typo="Typo.h5"> Please select controller </MudText>
    </MudPaper>
}

@code {
    string _selectedControllerName;
    protected override Task OnInitializedAsync()
    {
        return base.OnInitializedAsync();
    }

    void OnControllerDataUpdated()
    {
        InvokeAsync(StateHasChanged);    
    }
    
    void OnSelectedControllerChanged(string selectedControllerName)
    {
        if (Vm.CurrentSmcEthernetIpConnector != null)
            Vm.CurrentSmcEthernetIpConnector.OnNewControllerData -= OnControllerDataUpdated; 
            
        Vm.SetControllerByName(selectedControllerName);
        Vm.CurrentSmcEthernetIpConnector.OnNewControllerData += OnControllerDataUpdated; 
        InvokeAsync(StateHasChanged);
    }

}